/**
https://research.nvidia.com/sites/default/files/pubs/2012-06_Maximizing-Parallelism-in/karras2012hpg_paper.pdf
https://developer.nvidia.com/blog/thinking-parallel-part-iii-tree-construction-gpu/
*/
#version 460
#extension GL_GOOGLE_include_directive: enable

#include "lbvh_common.glsl"

layout (local_size_x = 256) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_num_elements;
    uint g_absolute_pointers;
};

layout (std430, set = 2, binding = 0) readonly buffer sorted_morton_codes {
    MortonCodeElement g_sorted_morton_codes[];
};

layout (std430, set = 2, binding = 1) readonly buffer elements {
    Element g_elements[];
};

layout (std430, set = 2, binding = 2) writeonly buffer lbvh {
    LBVHNode g_lbvh[];// |g_lbvh| == #leafnodes + #internalnodes = g_num_elements + g_num_elements - 1
};

layout (std430, set = 2, binding = 3) writeonly buffer lbvh_construction_infos {
    LBVHConstructionInfo g_lbvh_construction_infos[];
};

#define INVALID_POINTER 0x0

int delta(int i, uint codeI, int j) {
    if (j < 0 || j > g_num_elements - 1) {
        return -1;
    }
    uint codeJ = g_sorted_morton_codes[j].mortonCode;
    if (codeI == codeJ) {
        // handle duplicate morton codes
        uint elementIdxI = i;// g_sorted_morton_codes[i].elementIdx;
        uint elementIdxJ = j;// g_sorted_morton_codes[j].elementIdx;
        // add 32 for common prefix of codeI ^ codeJ
        return 32 + 31 - findMSB(elementIdxI ^ elementIdxJ);
    }
    return 31 - findMSB(codeI ^ codeJ);
}

void determineRange(int idx, out int lower, out int upper) {
    // determine direction of the range (+1 or -1)
    const uint code = g_sorted_morton_codes[idx].mortonCode;
    const int deltaL = delta(idx, code, idx - 1);
    const int deltaR = delta(idx, code, idx + 1);
    const int d = (deltaR >= deltaL) ? 1 : -1;

    // compute upper bound for the length of the range
    const int deltaMin = min(deltaL, deltaR);// delta(idx, code, idx - d);
    int lMax = 2;
    while (delta(idx, code, idx + lMax * d) > deltaMin) {
        lMax = lMax << 1;
    }

    // find the other end using binary search
    int l = 0;
    for (int t = lMax >> 1; t > 0; t >>= 1) {
        if (delta(idx, code, idx + (l + t) * d) > deltaMin) {
            l += t;
        }
    }
    int jdx = idx + l * d;

    // ensure idx < jdx
    lower = min(idx, jdx);
    upper = max(idx, jdx);
}

int findSplit(int first, int last) {
    uint firstCode = g_sorted_morton_codes[first].mortonCode;

    // Calculate the number of highest bits that are the same
    // for all objects, using the count-leading-zeros intrinsic.
    int commonPrefix = delta(first, firstCode, last);

    // Use binary search to find where the next bit differs.
    // Specifically, we are looking for the highest object that
    // shares more than commonPrefix bits with the first one.
    int split = first;// initial guess
    int stride = last - first;
    do {
        stride = (stride + 1) >> 1;// exponential decrease
        int newSplit = split + stride;// proposed new position
        if (newSplit < last) {
            int splitPrefix = delta(first, firstCode, newSplit);
            if (splitPrefix > commonPrefix) {
                split = newSplit;// accept proposal
            }
        }
    } while (stride > 1);

    return split;
}

// build hierarchy
void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;
    const int LEAF_OFFSET = int(g_num_elements) - 1;

    // construct leaf nodes
    if (gID < g_num_elements) {
        Element element = g_elements[g_sorted_morton_codes[gID].elementIdx];
        g_lbvh[LEAF_OFFSET + gID] = LBVHNode(INVALID_POINTER, INVALID_POINTER, element.primitiveIdx, element.aabbMinX, element.aabbMinY, element.aabbMinZ, element.aabbMaxX, element.aabbMaxY, element.aabbMaxZ);
    }

    // construct internal nodes
    if (gID < g_num_elements - 1) {
        // Find out which range of objects the node corresponds to.
        // (This is where the magic happens!)
        int first;
        int last;
        determineRange(int(gID), first, last);

        // determine where to split the range
        int split = findSplit(first, last);

        // select childA
        int childA = -1;
        if (split == first) {
            childA = LEAF_OFFSET + split;// pointer to leaf node
        } else {
            childA = split;// pointer to internal node
        }

        // select childB
        int childB = -1;
        if (split + 1 == last) {
            childB = LEAF_OFFSET + split + 1;// pointer to leaf node
        } else {
            childB = split + 1;// pointer to internal node
        }

        // record parent-child relationships
        if (g_absolute_pointers != 0) {
            g_lbvh[gID] = LBVHNode(childA, childB, 0, 0, 0, 0, 0, 0, 0);
        } else {
            g_lbvh[gID] = LBVHNode(childA - int(gID), childB - int(gID), 0, 0, 0, 0, 0, 0, 0);
        }
        g_lbvh_construction_infos[childA] = LBVHConstructionInfo(gID, 0);
        g_lbvh_construction_infos[childB] = LBVHConstructionInfo(gID, 0);
    }

    // node 0 is the root
    if (gID == 0) {
        g_lbvh_construction_infos[0] = LBVHConstructionInfo(0, 0);
    }
}