/**
https://research.nvidia.com/sites/default/files/pubs/2012-06_Maximizing-Parallelism-in/karras2012hpg_paper.pdf
https://developer.nvidia.com/blog/thinking-parallel-part-iii-tree-construction-gpu/
*/
#version 460
#extension GL_GOOGLE_include_directive: enable

layout (local_size_x = 256) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_num_elements;
    ivec3 g_min;
    ivec3 g_max;
};

struct MortonCodeElement {
    uint mortonCode; // key for sorting
    uint elementIdx; // pointer into element buffer
};

layout (std430, set = 0, binding = 0) writeonly buffer morton_codes {
    MortonCodeElement g_morton_codes[];
};

struct Element {
    uint primitiveIdx;
    uint propertyIdx;
    uint paddingA;
    uint paddingB;
    ivec4 aabbMin;
    ivec4 aabbMax;
};

layout (std430, set = 0, binding = 1) readonly buffer elements {
    Element g_elements[];
};

// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
uint expandBits(uint v) {
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
uint morton3D(float x, float y, float z) {
    x = min(max(x * 1024.0f, 0.0f), 1023.0f);
    y = min(max(y * 1024.0f, 0.0f), 1023.0f);
    z = min(max(z * 1024.0f, 0.0f), 1023.0f);
    uint xx = expandBits(uint(x));
    uint yy = expandBits(uint(y));
    uint zz = expandBits(uint(z));
    return xx * 4 + yy * 2 + zz;
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID >= g_num_elements) {
        return;
    }

    Element element = g_elements[gID];

    // calculate center
    vec3 center = (element.aabbMin + 0.5 * (element.aabbMax - element.aabbMin)).xyz;
    // map to unit cube
    vec3 mappedCenter = (center - g_min) / (g_max - g_min);
    // assign morton code
    g_morton_codes[gID] = MortonCodeElement(morton3D(mappedCenter.x, mappedCenter.y, mappedCenter.z), gID);
}